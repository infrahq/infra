name: cd / binaries

on:
  push:
    tags:
      - v*
  workflow_run:
    workflows:
      - ci / core
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    outputs:
      release-name: ${{ steps.release-name.outputs.release-name }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: release-name
        run: |
          RELEASE_NAME=${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || '$(git describe --tags)' }}
          echo "::set-output name=release-name::${RELEASE_NAME#v}"

  build:
    runs-on: ubuntu-latest
    needs: [prepare]
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: "1.19"
          cache: true
      - uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist --skip-publish --snapshot
        env:
          RELEASE_NAME: ${{ needs.prepare.outputs.release-name }}
      - uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: binaries
      - run: |
          # fail fast if the release does not exist
          gh release view v${{ needs.prepare.outputs.release-name }} || exit 1
          gh release upload v${{ needs.prepare.outputs.release-name }} *.txt *.zip *.deb *.rpm
        env:
          GH_TOKEN: ${{ github.token }}

  update-repos:
    runs-on: ubuntu-latest
    needs: [prepare, publish]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    strategy:
      matrix:
        repos:
          - repo: infrahq/homebrew-tap
            script: update-tap.sh
            commit-prefix: "Homebrew tap"
          - repo: infrahq/scoop
            script: update-scoop.sh
            commit-prefix: "Scoop"
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ matrix.repos.repo }}
          token: ${{ secrets.GORELEASER_GITHUB_TOKEN }}
      - run: |
          git config --global user.name infrahq-ci
          git config --global user.email contact@infrahq.com
          sh ${{ matrix.repos.script }} ${{ needs.prepare.outputs.release-name }}
          PACKAGE=$(git status --porcelain | awk '{ print $2 }')
          git add $PACKAGE
          git commit -m "${{ matrix.repos.commit-prefix }} update for ${PACKAGE%.*} version ${{ needs.prepare.outputs.release-name }}"
          git push origin @:refs/heads/main
