name: pull request

on:
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: set-version
        run: echo "::set-output name=version::$(git describe --tag @)"

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          stable: false
          go-version: 1.18.0-rc1
      - uses: actions/cache@v2
        with:
          path: |
            /go/pkg/mod
            /root/.cache/go-build
          key: ${{ runner.os }}-go-build
      - run: make test

  helm-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: Azure/setup-helm@v1
      - run: make helm/lint tag=${{ needs.setup.outputs.version }}

  commit-lint:
    if: startsWith(github.head_ref, 'dependabot/') != true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
      - id: cache-commitlint
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-commitlint
      - run: npm install @commitlint/{config-conventional,cli}
        if: steps.cache-commitlint.cache-hit != true
      - run: ./node_modules/.bin/commitlint --from origin/$GITHUB_BASE_REF --to @ --verbose --config .github/commitlint.config.js

  binaries:
    if: startsWith(github.head_ref, 'release-branch-build') == true
    needs: [setup, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          stable: false
          go-version: 1.18.0-rc1
      - uses: actions/cache@v2
        with:
          path: |
            /go/pkg/mod
            /root/.cache/go-build
          key: ${{ runner.os }}-go-build
      - run: |
          go generate -tags tools tools/tools.go
          export GORELEASER_CURRENT_TAG=${{ needs.setup.outputs.version }}
          goreleaser release -f .goreleaser.yml --rm-dist --skip-publish --skip-validate
        env:
          GITHUB_TOKEN: ${{ secrets.GORELEASER_GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v2
        with:
          path: 'dist/*'

  docker:
    if: startsWith(github.head_ref, 'release-branch-build') == true
    needs: [setup, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: metadata
        uses: docker/metadata-action@v3
        with:
          images: |
            infrahq.jfrog.io/docker-local/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.setup.outputs.version }}
      - uses: docker/setup-buildx-action@v1
      - uses: actions/cache@v2
        with:
          path: |
            /go/pkg/mod
            /root/.cache/go-build
          key: ${{ runner.os }}-go-build
      - uses: docker/login-action@v1
        with:
          registry: infrahq.jfrog.io
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_PASSWORD }}
      - uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          build-args: |
            TELEMETRY_WRITE_KEY=${{ secrets.TELEMETRY_WRITE_KEY }}
            CRASH_REPORTING_DSN=${{ secrets.CRASH_REPORTING_DSN }}
            BUILDVERSION=${{ needs.setup.outputs.version }}

  helm:
    if: startsWith(github.head_ref, 'release-branch-build') == true
    needs: [setup, helm-lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: azure/setup-helm@v1
      - run: |
          helm package helm/charts/* \
              --destination dist/ \
              --version ${{ needs.setup.outputs.version }} \
              --app-version ${{ needs.setup.outputs.version }}
      - uses: actions/upload-artifact@v2
        with:
          path: 'dist/*'

  upload:
    if: startsWith(github.head_ref, 'release-branch-build') == true
    needs: [binaries, docker, helm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          path: .
      - uses: jfrog/setup-jfrog-cli@v2
      - run: |
          sudo apt-get update && sudo apt-get install -y gettext
          envsubst <.github/artifactory.json.in >.github/artifactory.json
          jfrog config add infrahq \
              --url https://infrahq.jfrog.io \
              --user ${{ secrets.ARTIFACTORY_USERNAME }} \
              --access-token ${{ secrets.ARTIFACTORY_PASSWORD }}
          jfrog artifactory upload --server-id infrahq --spec .github/artifactory.json
        env:
          DEB_DISTRIBUTION: focal,jammy,bullseye
          DEB_COMPONENT: main
