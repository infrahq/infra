openapi: 3.0.0
servers:
  - url: /v1
info:
  version: 0.1.0
  title: Infra API
  description: Infra REST API
tags:
  - name: users
    description: Manage users
  - name: groups
    description: Manage groups
  - name: sources
    description: Manage identity sources
  - name: destinations
    description: Manage infrastructure destinations
  - name: api-keys
    description: Manage API keys used to access Infra admin endpoints
  - name: tokens
    description: Create credentials to access a destination
  - name: roles
    description: Manage roles
  - name: auth
    description: Authentication
  - name: version
    description: Version
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    APIPermission:
      description: API permissions of the form "infra.resource.action"
      type: string
      enum:
        - infra.users.read
        - infra.groups.read
        - infra.destinations.create
        - infra.destinations.read
        - infra.api-keys.create
        - infra.api-keys.read
        - infra.api-keys.delete
        - infra.tokens.create
        - infra.roles.read
        - infra.auth.delete
        - infra.*
    User:
      type: object
      required:
        - id
        - email
        - created
        - updated
      properties:
        id:
          type: string
        email:
          type: string
        created:
          type: integer
          format: int64
        updated:
          type: integer
          format: int64
    Group:
      type: object
      required:
        - id
        - name
        - created
        - updated
        - source
      properties:
        id:
          type: string
        name:
          type: string
        created:
          type: integer
          format: int64
        updated:
          type: integer
          format: int64
        source:
          type: string
    Source:
      type: object
      required:
        - id
        - created
        - updated
      properties:
        id:
          type: string
        created:
          type: integer
          format: int64
        updated:
          type: integer
          format: int64
        okta:
          $ref: '#/components/schemas/SourceOkta'
    SourceOkta:
      type: object
      required:
        - domain
        - clientId
      properties:
        domain:
          type: string
        clientId:
          type: string
    Destination:
      type: object
      required:
        - id
        - name
        - created
        - updated
      properties:
        id:
          type: string
        name:
          type: string
        created:
          type: integer
          format: int64
        updated:
          type: integer
          format: int64
        kubernetes:
          $ref: '#/components/schemas/DestinationKubernetes'
    DestinationCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        kubernetes:
          $ref: '#/components/schemas/DestinationKubernetes'
    DestinationKubernetes:
      type: object
      required:
        - ca
        - endpoint
      properties:
        ca:
          type: string
          x-go-custom-tag: validate:"required"
        endpoint:
          type: string
          x-go-custom-tag: validate:"required"
    InfraAPIKey:
      type: object
      required:
        - id
        - created
        - name
        - permissions
      properties:
        id:
          type: string
        created:
          type: integer
          format: int64
        name:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/APIPermission'
    InfraAPIKeyCreateRequest:
      type: object
      required:
        - name
        - permissions
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/APIPermission'
    InfraAPIKeyCreateResponse:
      allOf:
        - $ref: '#/components/schemas/InfraAPIKey'
      type: object
      required:
        - key
      properties:
        key:
          type: string
    Token:
      type: object
      required:
        - token
        - expires
      properties:
        token:
          type: string
        expires:
          type: integer
          format: int64
    TokenRequest:
      type: object
      properties:
        destination:
          type: string
          x-go-custom-tag: validate:"required"
    LoginRequest:
      type: object
      properties:
        okta:
          $ref: '#/components/schemas/LoginRequestOkta'
    Role:
      type: object
      required:
        - id
        - name
        - created
        - updated
        - kind
        - namespace
        - users
        - destination
      properties:
        id:
          type: string
        name:
          type: string
        created:
          type: integer
          format: int64
        updated:
          type: integer
          format: int64
        kind:
          $ref: "#/components/schemas/RoleKind"
        namespace:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        destination:
          $ref: '#/components/schemas/Destination'
    RoleKind:
      type: string
      enum:
        - role
        - cluster-role
    LoginRequestOkta:
      type: object
      required:
        - domain
        - code
      properties:
        domain:
          type: string
          x-go-custom-tag: validate:"required"
        code:
          type: string
          x-go-custom-tag: validate:"required"
    LoginResponse:
      type: object
      required:
        - token
        - name
      properties:
        token:
          type: string
        name:
          type: string
    Version:
      type: object
      required:
        - version
      properties:
        version:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
paths:
  /users:
    get:
      summary: List users
      tags:
        - users
      security:
        - bearerAuth: []
      operationId: listUsers
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: Filter results by user email
      responses:
        '200':
          description: users response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - users
      security:
        - bearerAuth: []
      operationId: getUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups:
    get:
      summary: List groups
      tags:
        - groups
      security:
        - bearerAuth: []
      operationId: listGroups
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filter groups by name
        - in: query
          name: active
          schema:
            type: boolean
          description: Filter groups by active state
      responses:
        '200':
          description: groups response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{id}:
    get:
      summary: Get group by ID
      tags:
        - groups
      security:
        - bearerAuth: []
      operationId: getGroup
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Group ID
      responses:
        '200':
          description: group response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sources:
    get:
      summary: List sources
      tags:
        - sources
      operationId: listSources
      parameters:
        - in: query
          name: type
          schema:
            type: string
          description: Filter sources by type
      responses:
        '200':
          description: sources response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /sources/{id}:
    get:
      summary: Get source by ID
      tags:
        - sources
      operationId: getSource
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Source ID
      responses:
        '200':
          description: source response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /destinations:
    get:
      tags:
        - destinations
      security:
        - bearerAuth: []
      summary: List destinations
      operationId: listDestinations
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filter destinations by name
        - in: query
          name: type
          schema:
            type: string
          description: Filter destinations by type
      responses:
        '200':
          description: destinations response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Destination'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - destinations
      security:
        - bearerAuth: []
      summary: Register a destination
      operationId: createDestination
      x-codegen-request-body-name: body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestinationCreateRequest'
      responses:
        '200':
          description: create destination response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destination'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /destinations/{id}:
    get:
      tags:
        - destinations
      security:
        - bearerAuth: []
      summary: Get Destination by ID
      operationId: getDestination
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Destination ID
      responses:
        '200':
          description: destinations response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destination'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api-keys:
    get:
      tags:
        - api-keys
      security:
        - bearerAuth: []
      summary: List API keys
      operationId: listAPIKeys
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filter results by the API key name
      responses:
        '200':
          description: API keys response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InfraAPIKey'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - api-keys
      security:
        - bearerAuth: []
      summary: Register an API key
      operationId: createAPIKey
      x-codegen-request-body-name: body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InfraAPIKeyCreateRequest'
      responses:
        '200':
          description: create API key response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfraAPIKeyCreateResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api-keys/{id}:
    delete:
      tags:
        - api-keys
      security:
        - bearerAuth: []
      summary: delete an API key
      operationId: deleteApiKey
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The API Key ID
      responses:
        '204':
          description: empty response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tokens:
    post:
      tags:
        - tokens
      security:
        - bearerAuth: []
      summary: Create credentials to access a destination
      operationId: createToken
      x-codegen-request-body-name: body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '200':
          description: create token response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /roles:
    get:
      summary: List roles
      tags:
        - roles
      security:
        - bearerAuth: []
      operationId: listRoles
      parameters:
        - in: query
          name: destinationId
          schema:
            type: string
          required: true
          description: ID of the destination for which to list roles
      responses:
        '200':
          description: roles response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      summary: Login to Infra and get an API token for a user
      tags:
        - auth
      operationId: login
      x-codegen-request-body-name: body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: login response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /logout:
    post:
      summary: Log out of Infra
      tags:
        - auth
      security:
        - bearerAuth: []
      operationId: logout
      responses:
        '200':
          description: logout response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /version:
    get:
      summary: Get version information
      tags:
        - version
      operationId: version
      responses:
        '200':
          description: version response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
