// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Created

	// no validation rules for Updated

	// no validation rules for Email

	// no validation rules for Admin

	return nil
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEmail() != "" {

		if err := m._validateEmail(m.GetEmail()); err != nil {
			return ListUsersRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
		}

	}

	return nil
}

func (m *ListUsersRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *ListUsersRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUsersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return CreateUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) < 4 {
		return CreateUserRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 4 runes",
		}
	}

	return nil
}

func (m *CreateUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeleteUserRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on Source with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Source) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Created

	// no validation rules for Updated

	// no validation rules for Type

	if v, ok := interface{}(m.GetOkta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SourceValidationError{
				field:  "Okta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SourceValidationError is the validation error returned by Source.Validate if
// the designated constraints aren't met.
type SourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourceValidationError) ErrorName() string { return "SourceValidationError" }

// Error satisfies the builtin error interface
func (e SourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourceValidationError{}

// Validate checks the field values on ListSourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSourcesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSources() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSourcesResponseValidationError{
					field:  fmt.Sprintf("Sources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSourcesResponseValidationError is the validation error returned by
// ListSourcesResponse.Validate if the designated constraints aren't met.
type ListSourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSourcesResponseValidationError) ErrorName() string {
	return "ListSourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSourcesResponseValidationError{}

// Validate checks the field values on CreateSourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSourceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetOkta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSourceRequestValidationError{
				field:  "Okta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateSourceRequestValidationError is the validation error returned by
// CreateSourceRequest.Validate if the designated constraints aren't met.
type CreateSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSourceRequestValidationError) ErrorName() string {
	return "CreateSourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSourceRequestValidationError{}

// Validate checks the field values on DeleteSourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSourceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeleteSourceRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteSourceRequestValidationError is the validation error returned by
// DeleteSourceRequest.Validate if the designated constraints aren't met.
type DeleteSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSourceRequestValidationError) ErrorName() string {
	return "DeleteSourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSourceRequestValidationError{}

// Validate checks the field values on Destination with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Destination) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Created

	// no validation rules for Updated

	// no validation rules for Name

	// no validation rules for Type

	if v, ok := interface{}(m.GetKubernetes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DestinationValidationError{
				field:  "Kubernetes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DestinationValidationError is the validation error returned by
// Destination.Validate if the designated constraints aren't met.
type DestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DestinationValidationError) ErrorName() string { return "DestinationValidationError" }

// Error satisfies the builtin error interface
func (e DestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDestination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DestinationValidationError{}

// Validate checks the field values on ListDestinationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDestinationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDestinations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDestinationsResponseValidationError{
					field:  fmt.Sprintf("Destinations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListDestinationsResponseValidationError is the validation error returned by
// ListDestinationsResponse.Validate if the designated constraints aren't met.
type ListDestinationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDestinationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDestinationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDestinationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDestinationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDestinationsResponseValidationError) ErrorName() string {
	return "ListDestinationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDestinationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDestinationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDestinationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDestinationsResponseValidationError{}

// Validate checks the field values on CreateDestinationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDestinationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return CreateDestinationRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetKubernetes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDestinationRequestValidationError{
				field:  "Kubernetes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateDestinationRequestValidationError is the validation error returned by
// CreateDestinationRequest.Validate if the designated constraints aren't met.
type CreateDestinationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDestinationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDestinationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDestinationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDestinationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDestinationRequestValidationError) ErrorName() string {
	return "CreateDestinationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDestinationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDestinationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDestinationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDestinationRequestValidationError{}

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Permission) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Created

	// no validation rules for Updated

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Role

	return nil
}

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}

// Validate checks the field values on ListPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPermissionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DestinationId

	return nil
}

// ListPermissionsRequestValidationError is the validation error returned by
// ListPermissionsRequest.Validate if the designated constraints aren't met.
type ListPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsRequestValidationError) ErrorName() string {
	return "ListPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsRequestValidationError{}

// Validate checks the field values on ListPermissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPermissionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPermissionsResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPermissionsResponseValidationError is the validation error returned by
// ListPermissionsResponse.Validate if the designated constraints aren't met.
type ListPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsResponseValidationError) ErrorName() string {
	return "ListPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsResponseValidationError{}

// Validate checks the field values on CreateCredResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCredResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	// no validation rules for Expires

	return nil
}

// CreateCredResponseValidationError is the validation error returned by
// CreateCredResponse.Validate if the designated constraints aren't met.
type CreateCredResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCredResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCredResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCredResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCredResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCredResponseValidationError) ErrorName() string {
	return "CreateCredResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCredResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCredResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCredResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCredResponseValidationError{}

// Validate checks the field values on ApiKey with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ApiKey) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Created

	// no validation rules for Updated

	// no validation rules for Name

	// no validation rules for Key

	return nil
}

// ApiKeyValidationError is the validation error returned by ApiKey.Validate if
// the designated constraints aren't met.
type ApiKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiKeyValidationError) ErrorName() string { return "ApiKeyValidationError" }

// Error satisfies the builtin error interface
func (e ApiKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiKeyValidationError{}

// Validate checks the field values on ListApiKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApiKeyResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetApiKeys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApiKeyResponseValidationError{
					field:  fmt.Sprintf("ApiKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListApiKeyResponseValidationError is the validation error returned by
// ListApiKeyResponse.Validate if the designated constraints aren't met.
type ListApiKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApiKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApiKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApiKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApiKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApiKeyResponseValidationError) ErrorName() string {
	return "ListApiKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApiKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApiKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApiKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApiKeyResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoginRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	if v, ok := interface{}(m.GetInfra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRequestValidationError{
				field:  "Infra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOkta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRequestValidationError{
				field:  "Okta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoginResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	return nil
}

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on SignupRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SignupRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return SignupRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		return SignupRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

func (m *SignupRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SignupRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SignupRequestValidationError is the validation error returned by
// SignupRequest.Validate if the designated constraints aren't met.
type SignupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignupRequestValidationError) ErrorName() string { return "SignupRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignupRequestValidationError{}

// Validate checks the field values on StatusResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StatusResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Admin

	return nil
}

// StatusResponseValidationError is the validation error returned by
// StatusResponse.Validate if the designated constraints aren't met.
type StatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusResponseValidationError) ErrorName() string { return "StatusResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusResponseValidationError{}

// Validate checks the field values on Source_Okta with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Source_Okta) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Domain

	// no validation rules for ClientId

	return nil
}

// Source_OktaValidationError is the validation error returned by
// Source_Okta.Validate if the designated constraints aren't met.
type Source_OktaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Source_OktaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Source_OktaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Source_OktaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Source_OktaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Source_OktaValidationError) ErrorName() string { return "Source_OktaValidationError" }

// Error satisfies the builtin error interface
func (e Source_OktaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSource_Okta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Source_OktaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Source_OktaValidationError{}

// Validate checks the field values on CreateSourceRequest_Okta with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSourceRequest_Okta) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		return CreateSourceRequest_OktaValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		return CreateSourceRequest_OktaValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetClientSecret()) < 1 {
		return CreateSourceRequest_OktaValidationError{
			field:  "ClientSecret",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetApiToken()) < 1 {
		return CreateSourceRequest_OktaValidationError{
			field:  "ApiToken",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// CreateSourceRequest_OktaValidationError is the validation error returned by
// CreateSourceRequest_Okta.Validate if the designated constraints aren't met.
type CreateSourceRequest_OktaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSourceRequest_OktaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSourceRequest_OktaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSourceRequest_OktaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSourceRequest_OktaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSourceRequest_OktaValidationError) ErrorName() string {
	return "CreateSourceRequest_OktaValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSourceRequest_OktaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSourceRequest_Okta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSourceRequest_OktaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSourceRequest_OktaValidationError{}

// Validate checks the field values on Destination_Kubernetes with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Destination_Kubernetes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ca

	// no validation rules for Endpoint

	return nil
}

// Destination_KubernetesValidationError is the validation error returned by
// Destination_Kubernetes.Validate if the designated constraints aren't met.
type Destination_KubernetesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Destination_KubernetesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Destination_KubernetesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Destination_KubernetesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Destination_KubernetesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Destination_KubernetesValidationError) ErrorName() string {
	return "Destination_KubernetesValidationError"
}

// Error satisfies the builtin error interface
func (e Destination_KubernetesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDestination_Kubernetes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Destination_KubernetesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Destination_KubernetesValidationError{}

// Validate checks the field values on CreateDestinationRequest_Kubernetes with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CreateDestinationRequest_Kubernetes) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCa()) < 1 {
		return CreateDestinationRequest_KubernetesValidationError{
			field:  "Ca",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		return CreateDestinationRequest_KubernetesValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// CreateDestinationRequest_KubernetesValidationError is the validation error
// returned by CreateDestinationRequest_Kubernetes.Validate if the designated
// constraints aren't met.
type CreateDestinationRequest_KubernetesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDestinationRequest_KubernetesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDestinationRequest_KubernetesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDestinationRequest_KubernetesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDestinationRequest_KubernetesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDestinationRequest_KubernetesValidationError) ErrorName() string {
	return "CreateDestinationRequest_KubernetesValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDestinationRequest_KubernetesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDestinationRequest_Kubernetes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDestinationRequest_KubernetesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDestinationRequest_KubernetesValidationError{}

// Validate checks the field values on LoginRequest_Infra with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoginRequest_Infra) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return LoginRequest_InfraValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		return LoginRequest_InfraValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

func (m *LoginRequest_Infra) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *LoginRequest_Infra) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// LoginRequest_InfraValidationError is the validation error returned by
// LoginRequest_Infra.Validate if the designated constraints aren't met.
type LoginRequest_InfraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequest_InfraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequest_InfraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequest_InfraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequest_InfraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequest_InfraValidationError) ErrorName() string {
	return "LoginRequest_InfraValidationError"
}

// Error satisfies the builtin error interface
func (e LoginRequest_InfraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest_Infra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequest_InfraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequest_InfraValidationError{}

// Validate checks the field values on LoginRequest_Okta with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LoginRequest_Okta) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		return LoginRequest_OktaValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		return LoginRequest_OktaValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// LoginRequest_OktaValidationError is the validation error returned by
// LoginRequest_Okta.Validate if the designated constraints aren't met.
type LoginRequest_OktaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequest_OktaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequest_OktaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequest_OktaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequest_OktaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequest_OktaValidationError) ErrorName() string {
	return "LoginRequest_OktaValidationError"
}

// Error satisfies the builtin error interface
func (e LoginRequest_OktaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest_Okta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequest_OktaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequest_OktaValidationError{}
