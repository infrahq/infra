syntax = "proto3";

package v1;

option go_package = "github.com/infrahq/infra/internal/v1";

import "validate/validate.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service V1 {
    rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
        option (google.api.http) = {
            get: "/v1/users"
        };
    }
    rpc CreateUser(CreateUserRequest) returns (User) {}
    rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {}
    rpc ListDestinations(google.protobuf.Empty) returns (ListDestinationsResponse) {}
    rpc CreateDestination(CreateDestinationRequest) returns (Destination) {}
    rpc ListSources(google.protobuf.Empty) returns (ListSourcesResponse) {}
    rpc CreateSource(CreateSourceRequest) returns (Source) {}
    rpc DeleteSource(DeleteSourceRequest) returns (google.protobuf.Empty) {}
    rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {}
    rpc CreateCred(google.protobuf.Empty) returns (CreateCredResponse) {}
    rpc ListApiKeys(google.protobuf.Empty) returns (ListApiKeyResponse) {}
    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/login"
            body: "*"
        };
    }
    rpc Logout(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/logout"
            body: "*"
        };
    }
    rpc Signup(SignupRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/signup"
            body: "*"
        };
    }
    rpc Status(google.protobuf.Empty) returns (StatusResponse) {
        option (google.api.http) = {
            get: "/v1/status"
        };
    }
    rpc Version(google.protobuf.Empty) returns (VersionResponse) {}
}

enum SourceType {
    INFRA = 0;
    OKTA = 1;
}

enum DestinationType {
    KUBERNETES = 0;
}

enum KubernetesRoleType {
    ROLE = 0;
    CLUSTER_ROLE = 1;
}

message User {
    string id = 1;
    int64 created = 2;
    int64 updated = 3;
    string email = 10;
    bool admin = 20;
}

message ListUsersRequest {
    string email = 1 [(validate.rules).string = {ignore_empty: true, email: true}];
}

message ListUsersResponse {
    repeated User users = 1;
}

message CreateUserRequest {
    string email = 1 [(validate.rules).string.email = true];
    string password = 2 [(validate.rules).string.min_len = 4];
}

message DeleteUserRequest {
    string id = 1 [(validate.rules).string.min_len = 1];
}

message Source {
    string id = 1;
    int64 created = 2;
    int64 updated = 3;

    SourceType type = 40;

    message Okta {
        string domain = 1;
        string client_id = 2;
    }
    Okta okta = 50;
}

message ListSourcesResponse {
    repeated Source sources = 1;
}

message CreateSourceRequest {
    SourceType type = 10;

    message Okta {
        string domain = 1 [(validate.rules).string.hostname = true];
        string client_id = 2 [(validate.rules).string.min_len = 1];
        string client_secret = 3 [(validate.rules).string.min_len = 1];
        string api_token = 4 [(validate.rules).string.min_len = 1];
    }
    Okta okta = 20;
}

message DeleteSourceRequest {
    string id = 1 [(validate.rules).string.min_len = 1];
}

message Destination {
    string id = 1;
    int64 created = 2;
    int64 updated = 3;
    string name = 4;
    
    DestinationType type = 50;

    message Kubernetes {
        string ca = 1;
        string endpoint = 2;
        string namespace = 3;
        string sa_token = 4;
    }

    Kubernetes kubernetes = 60;
}

message ListDestinationsResponse {
    repeated Destination destinations = 1;
}

message CreateDestinationRequest {
    string name = 1 [(validate.rules).string.min_len = 1];

    DestinationType type = 20;

    message Kubernetes {
        string ca = 1 [(validate.rules).string.min_len = 1];
        string endpoint = 2 [(validate.rules).string.min_len = 1];
        string namespace = 3 [(validate.rules).string.min_len = 1];
        string sa_token = 4 [(validate.rules).string.min_len = 1];
    }
    Kubernetes kubernetes = 30;
}

message Role {
    string id = 1;
    int64 created = 2;
    int64 updated = 3;

    User user = 40;

    Destination destination = 50;

    string name = 60;
    
    KubernetesRoleType kind = 70;
}

message ListRolesRequest {
    string destination_id = 10;
}

message ListRolesResponse {
    repeated Role roles = 1;
}

message CreateCredResponse {
    string token = 10;
    int64 expires = 20;
}

message ApiKey {
    string id = 1;
    int64 created = 2;
    int64 updated = 3;

    string name = 40;

    string key = 50;
}

message ListApiKeyResponse {
    repeated ApiKey api_keys = 1;
}

message LoginRequest {
    SourceType type = 10;

    message Infra {
        string email = 1 [(validate.rules).string.email = true];
        string password = 2 [(validate.rules).string.min_len = 1];
    }

    Infra infra = 20;

    message Okta {
        string domain = 1 [(validate.rules).string.hostname = true];
        string code = 2 [(validate.rules).string.min_len = 1];
    }
    Okta okta = 30;
}

message LoginResponse {
    string token = 1;
}

message SignupRequest {
    string email = 1 [(validate.rules).string.email = true];
    string password = 2 [(validate.rules).string.min_len = 1];
}

message StatusResponse {
    bool admin = 1;
}

message VersionResponse {
    string version = 1;
}

message Error {
    string message = 1;
    repeated ErrorDetails details = 2;
}

message ErrorDetails {
    string name = 1;
    string description = 2;
}
