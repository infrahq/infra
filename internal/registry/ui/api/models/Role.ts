/* tslint:disable */
/* eslint-disable */
/**
 * Infra API
 * Infra REST API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Destination,
    DestinationFromJSON,
    DestinationFromJSONTyped,
    DestinationToJSON,
    Group,
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
    RoleKind,
    RoleKindFromJSON,
    RoleKindFromJSONTyped,
    RoleKindToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './';

/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    name: string;
    /**
     * created time in seconds since 1970-01-01
     * @type {number}
     * @memberof Role
     */
    created: number;
    /**
     * updated time in seconds since 1970-01-01
     * @type {number}
     * @memberof Role
     */
    updated: number;
    /**
     * 
     * @type {RoleKind}
     * @memberof Role
     */
    kind: RoleKind;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    namespace: string;
    /**
     * 
     * @type {Array<User>}
     * @memberof Role
     */
    users: Array<User>;
    /**
     * 
     * @type {Array<Group>}
     * @memberof Role
     */
    groups: Array<Group>;
    /**
     * 
     * @type {Destination}
     * @memberof Role
     */
    destination: Destination;
}

export function RoleFromJSON(json: any): Role {
    return RoleFromJSONTyped(json, false);
}

export function RoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Role {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'created': json['created'],
        'updated': json['updated'],
        'kind': RoleKindFromJSON(json['kind']),
        'namespace': json['namespace'],
        'users': ((json['users'] as Array<any>).map(UserFromJSON)),
        'groups': ((json['groups'] as Array<any>).map(GroupFromJSON)),
        'destination': DestinationFromJSON(json['destination']),
    };
}

export function RoleToJSON(value?: Role | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'created': value.created,
        'updated': value.updated,
        'kind': RoleKindToJSON(value.kind),
        'namespace': value.namespace,
        'users': ((value.users as Array<any>).map(UserToJSON)),
        'groups': ((value.groups as Array<any>).map(GroupToJSON)),
        'destination': DestinationToJSON(value.destination),
    };
}


