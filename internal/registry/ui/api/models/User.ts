/* tslint:disable */
/* eslint-disable */
/**
 * Infra API
 * Infra REST API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Grant,
    GrantFromJSON,
    GrantFromJSONTyped,
    GrantToJSON,
    Group,
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
    Provider,
    ProviderFromJSON,
    ProviderFromJSONTyped,
    ProviderToJSON,
} from './';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * created time in seconds since 1970-01-01
     * @type {number}
     * @memberof User
     */
    created: number;
    /**
     * updated time in seconds since 1970-01-01
     * @type {number}
     * @memberof User
     */
    updated: number;
    /**
     * timestamp of this user's last interaction with Infra in seconds since 1970-01-01
     * @type {number}
     * @memberof User
     */
    lastSeenAt: number;
    /**
     * 
     * @type {Array<Group>}
     * @memberof User
     */
    groups?: Array<Group>;
    /**
     * 
     * @type {Array<Grant>}
     * @memberof User
     */
    grants?: Array<Grant>;
    /**
     * 
     * @type {Array<Provider>}
     * @memberof User
     */
    providers?: Array<Provider>;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'email': json['email'],
        'created': json['created'],
        'updated': json['updated'],
        'lastSeenAt': json['lastSeenAt'],
        'groups': !exists(json, 'groups') ? undefined : ((json['groups'] as Array<any>).map(GroupFromJSON)),
        'grants': !exists(json, 'grants') ? undefined : ((json['grants'] as Array<any>).map(GrantFromJSON)),
        'providers': !exists(json, 'providers') ? undefined : ((json['providers'] as Array<any>).map(ProviderFromJSON)),
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'email': value.email,
        'created': value.created,
        'updated': value.updated,
        'lastSeenAt': value.lastSeenAt,
        'groups': value.groups === undefined ? undefined : ((value.groups as Array<any>).map(GroupToJSON)),
        'grants': value.grants === undefined ? undefined : ((value.grants as Array<any>).map(GrantToJSON)),
        'providers': value.providers === undefined ? undefined : ((value.providers as Array<any>).map(ProviderToJSON)),
    };
}


