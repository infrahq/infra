/* tslint:disable */
/* eslint-disable */
/**
 * Infra API
 * Infra REST API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Grant,
    GrantFromJSON,
    GrantFromJSONTyped,
    GrantToJSON,
    Provider,
    ProviderFromJSON,
    ProviderFromJSONTyped,
    ProviderToJSON,
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './';

/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    name: string;
    /**
     * created time in seconds since 1970-01-01
     * @type {number}
     * @memberof Group
     */
    created: number;
    /**
     * updated time in seconds since 1970-01-01
     * @type {number}
     * @memberof Group
     */
    updated: number;
    /**
     * 
     * @type {Array<User>}
     * @memberof Group
     */
    users?: Array<User>;
    /**
     * 
     * @type {Array<Grant>}
     * @memberof Group
     */
    grants?: Array<Grant>;
    /**
     * 
     * @type {Array<Provider>}
     * @memberof Group
     */
    providers?: Array<Provider>;
}

export function GroupFromJSON(json: any): Group {
    return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'created': json['created'],
        'updated': json['updated'],
        'users': !exists(json, 'users') ? undefined : ((json['users'] as Array<any>).map(UserFromJSON)),
        'grants': !exists(json, 'grants') ? undefined : ((json['grants'] as Array<any>).map(GrantFromJSON)),
        'providers': !exists(json, 'providers') ? undefined : ((json['providers'] as Array<any>).map(ProviderFromJSON)),
    };
}

export function GroupToJSON(value?: Group | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'created': value.created,
        'updated': value.updated,
        'users': value.users === undefined ? undefined : ((value.users as Array<any>).map(UserToJSON)),
        'grants': value.grants === undefined ? undefined : ((value.grants as Array<any>).map(GrantToJSON)),
        'providers': value.providers === undefined ? undefined : ((value.providers as Array<any>).map(ProviderToJSON)),
    };
}


