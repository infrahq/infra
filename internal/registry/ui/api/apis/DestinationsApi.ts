/* tslint:disable */
/* eslint-disable */
/**
 * Infra API
 * Infra REST API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Destination,
    DestinationFromJSON,
    DestinationToJSON,
    DestinationKind,
    DestinationKindFromJSON,
    DestinationKindToJSON,
    DestinationRequest,
    DestinationRequestFromJSON,
    DestinationRequestToJSON,
} from '../models';

export interface CreateDestinationRequest {
    body: DestinationRequest;
}

export interface DeleteDestinationRequest {
    id: string;
}

export interface GetDestinationRequest {
    id: string;
}

export interface ListDestinationsRequest {
    kind?: DestinationKind;
    nodeID?: string;
    name?: string;
    labels?: Array<string>;
}

export interface UpdateDestinationRequest {
    id: string;
    destinationRequest: DestinationRequest;
}

export interface UpdateDestinationRequest {
    body: DestinationUpdateRequest;
}

/**
 * 
 */
export class DestinationsApi extends runtime.BaseAPI {

    /**
     * Create a destination
     */
    async createDestinationRaw(requestParameters: CreateDestinationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/destinations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     * Create a destination
     */
    async createDestination(requestParameters: CreateDestinationRequest, initOverrides?: RequestInit): Promise<Destination> {
        const response = await this.createDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a destination by ID
     */
    async deleteDestinationRaw(requestParameters: DeleteDestinationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/destinations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     * Delete a destination by ID
     */
    async deleteDestination(requestParameters: DeleteDestinationRequest, initOverrides?: RequestInit): Promise<Destination> {
        const response = await this.deleteDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a destination by ID
     */
    async getDestinationRaw(requestParameters: GetDestinationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/destinations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     * Get a destination by ID
     */
    async getDestination(requestParameters: GetDestinationRequest, initOverrides?: RequestInit): Promise<Destination> {
        const response = await this.getDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List destinations
     */
    async listDestinationsRaw(requestParameters: ListDestinationsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Destination>>> {
        const queryParameters: any = {};

        if (requestParameters.kind !== undefined) {
            queryParameters['kind'] = requestParameters.kind;
        }

        if (requestParameters.nodeID !== undefined) {
            queryParameters['nodeID'] = requestParameters.nodeID;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.labels) {
            queryParameters['labels'] = requestParameters.labels;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/destinations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DestinationFromJSON));
    }

    /**
     * List destinations
     */
    async listDestinations(requestParameters: ListDestinationsRequest, initOverrides?: RequestInit): Promise<Array<Destination>> {
        const response = await this.listDestinationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a destination
     */
    async updateDestinationRaw(requestParameters: UpdateDestinationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/destinations`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     * Update a destination
     */
    async updateDestination(requestParameters: UpdateDestinationRequest, initOverrides?: RequestInit): Promise<Destination> {
        const response = await this.updateDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
