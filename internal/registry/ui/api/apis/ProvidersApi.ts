/* tslint:disable */
/* eslint-disable */
/**
 * Infra API
 * Infra REST API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Provider,
    ProviderFromJSON,
    ProviderToJSON,
    ProviderKind,
    ProviderKindFromJSON,
    ProviderKindToJSON,
} from '../models';

export interface GetProviderRequest {
    id: string;
}

export interface ListProvidersRequest {
    kind?: ProviderKind;
}

/**
 * 
 */
export class ProvidersApi extends runtime.BaseAPI {

    /**
     * Get provider by ID
     */
    async getProviderRaw(requestParameters: GetProviderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProvider.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/providers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     * Get provider by ID
     */
    async getProvider(requestParameters: GetProviderRequest, initOverrides?: RequestInit): Promise<Provider> {
        const response = await this.getProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List providers
     */
    async listProvidersRaw(requestParameters: ListProvidersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Provider>>> {
        const queryParameters: any = {};

        if (requestParameters.kind !== undefined) {
            queryParameters['kind'] = requestParameters.kind;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProviderFromJSON));
    }

    /**
     * List providers
     */
    async listProviders(requestParameters: ListProvidersRequest, initOverrides?: RequestInit): Promise<Array<Provider>> {
        const response = await this.listProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
