/* tslint:disable */
/* eslint-disable */
/**
 * Infra API
 * Infra REST API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InfraAPIKey,
    InfraAPIKeyFromJSON,
    InfraAPIKeyToJSON,
    InfraAPIKeyCreateRequest,
    InfraAPIKeyCreateRequestFromJSON,
    InfraAPIKeyCreateRequestToJSON,
    InfraAPIKeyCreateResponse,
    InfraAPIKeyCreateResponseFromJSON,
    InfraAPIKeyCreateResponseToJSON,
} from '../models';

export interface CreateAPIKeyRequest {
    body: InfraAPIKeyCreateRequest;
}

export interface DeleteApiKeyRequest {
    id: string;
}

export interface ListAPIKeysRequest {
    name?: string;
}

/**
 * 
 */
export class ApiKeysApi extends runtime.BaseAPI {

    /**
     * Create an API key
     */
    async createAPIKeyRaw(requestParameters: CreateAPIKeyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InfraAPIKeyCreateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAPIKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api-keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InfraAPIKeyCreateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfraAPIKeyCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create an API key
     */
    async createAPIKey(requestParameters: CreateAPIKeyRequest, initOverrides?: RequestInit): Promise<InfraAPIKeyCreateResponse> {
        const response = await this.createAPIKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an API key
     */
    async deleteApiKeyRaw(requestParameters: DeleteApiKeyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api-keys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an API key
     */
    async deleteApiKey(requestParameters: DeleteApiKeyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteApiKeyRaw(requestParameters, initOverrides);
    }

    /**
     * List API keys
     */
    async listAPIKeysRaw(requestParameters: ListAPIKeysRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<InfraAPIKey>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api-keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InfraAPIKeyFromJSON));
    }

    /**
     * List API keys
     */
    async listAPIKeys(requestParameters: ListAPIKeysRequest, initOverrides?: RequestInit): Promise<Array<InfraAPIKey>> {
        const response = await this.listAPIKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
