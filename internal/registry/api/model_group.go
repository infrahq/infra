/*
 * Infra API
 *
 * Infra REST API
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

type Group struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Created int64 `json:"created"`

	Updated int64 `json:"updated"`
}

// AssertGroupRequired checks if the required fields are not zero-ed
func AssertGroupRequired(obj Group) error {
	elements := map[string]interface{}{
		"id":      obj.Id,
		"name":    obj.Name,
		"created": obj.Created,
		"updated": obj.Updated,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseGroupRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Group (e.g. [][]Group), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseGroupRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aGroup, ok := obj.(Group)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertGroupRequired(aGroup)
	})
}
