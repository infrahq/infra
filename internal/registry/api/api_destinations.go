/*
 * Infra API
 *
 * Infra REST API
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DestinationsApiController binds http requests to an api service and writes the service results to the http response
type DestinationsApiController struct {
	service      DestinationsApiServicer
	errorHandler ErrorHandler
}

// DestinationsApiOption for how the controller is set up.
type DestinationsApiOption func(*DestinationsApiController)

// WithDestinationsApiErrorHandler inject ErrorHandler into controller
func WithDestinationsApiErrorHandler(h ErrorHandler) DestinationsApiOption {
	return func(c *DestinationsApiController) {
		c.errorHandler = h
	}
}

// NewDestinationsApiController creates a default api controller
func NewDestinationsApiController(s DestinationsApiServicer, opts ...DestinationsApiOption) Router {
	controller := &DestinationsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the DestinationsApiController
func (c *DestinationsApiController) Routes() Routes {
	return Routes{
		{
			"CreateDestination",
			strings.ToUpper("Post"),
			"/destinations",
			c.CreateDestination,
		},
		{
			"ListDestinations",
			strings.ToUpper("Get"),
			"/destinations",
			c.ListDestinations,
		},
	}
}

// CreateDestination - Register a destination
func (c *DestinationsApiController) CreateDestination(w http.ResponseWriter, r *http.Request) {
	body := DestinationCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&body); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDestinationCreateRequestRequired(body); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateDestination(r.Context(), body)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListDestinations - List destinations
func (c *DestinationsApiController) ListDestinations(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListDestinations(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
