/*
 * Infra API
 *
 * Infra REST API
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AuthApiController binds http requests to an api service and writes the service results to the http response
type AuthApiController struct {
	service      AuthApiServicer
	errorHandler ErrorHandler
}

// AuthApiOption for how the controller is set up.
type AuthApiOption func(*AuthApiController)

// WithAuthApiErrorHandler inject ErrorHandler into controller
func WithAuthApiErrorHandler(h ErrorHandler) AuthApiOption {
	return func(c *AuthApiController) {
		c.errorHandler = h
	}
}

// NewAuthApiController creates a default api controller
func NewAuthApiController(s AuthApiServicer, opts ...AuthApiOption) Router {
	controller := &AuthApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the AuthApiController
func (c *AuthApiController) Routes() Routes {
	return Routes{
		{
			"Login",
			strings.ToUpper("Post"),
			"/login",
			c.Login,
		},
		{
			"Logout",
			strings.ToUpper("Post"),
			"/logout",
			c.Logout,
		},
		{
			"Signup",
			strings.ToUpper("Post"),
			"/signup",
			c.Signup,
		},
	}
}

// Login - Log in to Infra and get an API token for a user
func (c *AuthApiController) Login(w http.ResponseWriter, r *http.Request) {
	body := LoginRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&body); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoginRequestRequired(body); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Login(r.Context(), body)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Logout - Log out of Infra
func (c *AuthApiController) Logout(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Logout(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Signup - Sign up Infra's admin user and get an API token for a user
func (c *AuthApiController) Signup(w http.ResponseWriter, r *http.Request) {
	body := SignupRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&body); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSignupRequestRequired(body); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Signup(r.Context(), body)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
