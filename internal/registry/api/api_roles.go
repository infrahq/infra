/*
 * Infra API
 *
 * Infra REST API
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RolesApiController binds http requests to an api service and writes the service results to the http response
type RolesApiController struct {
	service      RolesApiServicer
	errorHandler ErrorHandler
}

// RolesApiOption for how the controller is set up.
type RolesApiOption func(*RolesApiController)

// WithRolesApiErrorHandler inject ErrorHandler into controller
func WithRolesApiErrorHandler(h ErrorHandler) RolesApiOption {
	return func(c *RolesApiController) {
		c.errorHandler = h
	}
}

// NewRolesApiController creates a default api controller
func NewRolesApiController(s RolesApiServicer, opts ...RolesApiOption) Router {
	controller := &RolesApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the RolesApiController
func (c *RolesApiController) Routes() Routes {
	return Routes{
		{
			"ListRoles",
			strings.ToUpper("Get"),
			"/roles",
			c.ListRoles,
		},
	}
}

// ListRoles - List roles
func (c *RolesApiController) ListRoles(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	destinationId := query.Get("destinationId")
	result, err := c.service.ListRoles(r.Context(), destinationId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
