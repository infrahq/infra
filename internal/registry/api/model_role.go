/*
 * Infra API
 *
 * Infra REST API
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

type Role struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Created int64 `json:"created"`

	Updated int64 `json:"updated"`

	Users []User `json:"users"`

	Destination Destination `json:"destination"`

	Kind string `json:"kind"`
}

// AssertRoleRequired checks if the required fields are not zero-ed
func AssertRoleRequired(obj Role) error {
	elements := map[string]interface{}{
		"id":          obj.Id,
		"name":        obj.Name,
		"created":     obj.Created,
		"updated":     obj.Updated,
		"users":       obj.Users,
		"destination": obj.Destination,
		"kind":        obj.Kind,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Users {
		if err := AssertUserRequired(el); err != nil {
			return err
		}
	}
	if err := AssertDestinationRequired(obj.Destination); err != nil {
		return err
	}
	return nil
}

// AssertRecurseRoleRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Role (e.g. [][]Role), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseRoleRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aRole, ok := obj.(Role)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertRoleRequired(aRole)
	})
}
