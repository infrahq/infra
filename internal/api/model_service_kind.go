/*
Infra API

Infra REST API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ServiceKind the model 'ServiceKind'
type ServiceKind string

// List of ServiceKind
const (
	API    ServiceKind = "api"
	CLIENT ServiceKind = "client"
)

var allowedServiceKindEnumValues = []ServiceKind{
	"api",
	"client",
}

func (v *ServiceKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceKind(value)
	for _, existing := range allowedServiceKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceKind", value)
}

// NewServiceKindFromValue returns a pointer to a valid ServiceKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceKindFromValue(v string) (*ServiceKind, error) {
	ev := ServiceKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceKind: valid values are %v", v, allowedServiceKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceKind) IsValid() bool {
	for _, existing := range allowedServiceKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceKind value
func (v ServiceKind) Ptr() *ServiceKind {
	return &v
}

type NullableServiceKind struct {
	value *ServiceKind
	isSet bool
}

func (v NullableServiceKind) Get() *ServiceKind {
	return v.value
}

func (v *NullableServiceKind) Set(val *ServiceKind) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceKind) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceKind(val *ServiceKind) *NullableServiceKind {
	return &NullableServiceKind{value: val, isSet: true}
}

func (v NullableServiceKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
