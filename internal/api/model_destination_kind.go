/*
Infra API

Infra REST API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// DestinationKind the model 'DestinationKind'
type DestinationKind string

// List of DestinationKind
const (
	KUBERNETES DestinationKind = "kubernetes"
)

var allowedDestinationKindEnumValues = []DestinationKind{
	"kubernetes",
}

func (v *DestinationKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DestinationKind(value)
	for _, existing := range allowedDestinationKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DestinationKind", value)
}

// NewDestinationKindFromValue returns a pointer to a valid DestinationKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDestinationKindFromValue(v string) (*DestinationKind, error) {
	ev := DestinationKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DestinationKind: valid values are %v", v, allowedDestinationKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DestinationKind) IsValid() bool {
	for _, existing := range allowedDestinationKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DestinationKind value
func (v DestinationKind) Ptr() *DestinationKind {
	return &v
}

type NullableDestinationKind struct {
	value *DestinationKind
	isSet bool
}

func (v NullableDestinationKind) Get() *DestinationKind {
	return v.value
}

func (v *NullableDestinationKind) Set(val *DestinationKind) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationKind) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationKind(val *DestinationKind) *NullableDestinationKind {
	return &NullableDestinationKind{value: val, isSet: true}
}

func (v NullableDestinationKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
