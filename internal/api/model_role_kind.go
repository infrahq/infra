/*
Infra API

Infra REST API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// RoleKind the model 'RoleKind'
type RoleKind string

// List of RoleKind
const (
	ROLE         RoleKind = "role"
	CLUSTER_ROLE RoleKind = "cluster-role"
)

var allowedRoleKindEnumValues = []RoleKind{
	"role",
	"cluster-role",
}

func (v *RoleKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoleKind(value)
	for _, existing := range allowedRoleKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoleKind", value)
}

// NewRoleKindFromValue returns a pointer to a valid RoleKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleKindFromValue(v string) (*RoleKind, error) {
	ev := RoleKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoleKind: valid values are %v", v, allowedRoleKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoleKind) IsValid() bool {
	for _, existing := range allowedRoleKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoleKind value
func (v RoleKind) Ptr() *RoleKind {
	return &v
}

type NullableRoleKind struct {
	value *RoleKind
	isSet bool
}

func (v NullableRoleKind) Get() *RoleKind {
	return v.value
}

func (v *NullableRoleKind) Set(val *RoleKind) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleKind) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleKind(val *RoleKind) *NullableRoleKind {
	return &NullableRoleKind{value: val, isSet: true}
}

func (v NullableRoleKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
