/*
Infra API

Infra REST API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ProviderKind the model 'ProviderKind'
type ProviderKind string

// List of ProviderKind
const (
	PROVIDERKIND_OKTA ProviderKind = "okta"
)

var allowedProviderKindEnumValues = []ProviderKind{
	"okta",
}

func (v *ProviderKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProviderKind(value)
	for _, existing := range allowedProviderKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProviderKind", value)
}

// NewProviderKindFromValue returns a pointer to a valid ProviderKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProviderKindFromValue(v string) (*ProviderKind, error) {
	ev := ProviderKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProviderKind: valid values are %v", v, allowedProviderKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProviderKind) IsValid() bool {
	for _, existing := range allowedProviderKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProviderKind value
func (v ProviderKind) Ptr() *ProviderKind {
	return &v
}

type NullableProviderKind struct {
	value *ProviderKind
	isSet bool
}

func (v NullableProviderKind) Get() *ProviderKind {
	return v.value
}

func (v *NullableProviderKind) Set(val *ProviderKind) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderKind) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderKind(val *ProviderKind) *NullableProviderKind {
	return &NullableProviderKind{value: val, isSet: true}
}

func (v NullableProviderKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
