/*
Infra API

Infra REST API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// InfraAPIPermission InfraAPI permissions of the form \"infra.resource.action\"
type InfraAPIPermission string

// List of InfraAPIPermission
const (
	USERS_READ          InfraAPIPermission = "infra.users.read"
	GROUPS_READ         InfraAPIPermission = "infra.groups.read"
	DESTINATIONS_CREATE InfraAPIPermission = "infra.destinations.create"
	DESTINATIONS_READ   InfraAPIPermission = "infra.destinations.read"
	API_KEYS_CREATE     InfraAPIPermission = "infra.api-keys.create"
	API_KEYS_READ       InfraAPIPermission = "infra.api-keys.read"
	API_KEYS_DELETE     InfraAPIPermission = "infra.api-keys.delete"
	TOKENS_CREATE       InfraAPIPermission = "infra.tokens.create"
	ROLES_READ          InfraAPIPermission = "infra.roles.read"
	AUTH_DELETE         InfraAPIPermission = "infra.auth.delete"
	STAR                InfraAPIPermission = "infra.*"
)

var allowedInfraAPIPermissionEnumValues = []InfraAPIPermission{
	"infra.users.read",
	"infra.groups.read",
	"infra.destinations.create",
	"infra.destinations.read",
	"infra.api-keys.create",
	"infra.api-keys.read",
	"infra.api-keys.delete",
	"infra.tokens.create",
	"infra.roles.read",
	"infra.auth.delete",
	"infra.*",
}

func (v *InfraAPIPermission) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InfraAPIPermission(value)
	for _, existing := range allowedInfraAPIPermissionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InfraAPIPermission", value)
}

// NewInfraAPIPermissionFromValue returns a pointer to a valid InfraAPIPermission
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInfraAPIPermissionFromValue(v string) (*InfraAPIPermission, error) {
	ev := InfraAPIPermission(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InfraAPIPermission: valid values are %v", v, allowedInfraAPIPermissionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InfraAPIPermission) IsValid() bool {
	for _, existing := range allowedInfraAPIPermissionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InfraAPIPermission value
func (v InfraAPIPermission) Ptr() *InfraAPIPermission {
	return &v
}

type NullableInfraAPIPermission struct {
	value *InfraAPIPermission
	isSet bool
}

func (v NullableInfraAPIPermission) Get() *InfraAPIPermission {
	return v.value
}

func (v *NullableInfraAPIPermission) Set(val *InfraAPIPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableInfraAPIPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableInfraAPIPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfraAPIPermission(val *InfraAPIPermission) *NullableInfraAPIPermission {
	return &NullableInfraAPIPermission{value: val, isSet: true}
}

func (v NullableInfraAPIPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfraAPIPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
