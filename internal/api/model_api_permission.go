/*
Infra API

Infra REST API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// APIPermission API permissions of the form \"infra.resource.action\"
type APIPermission string

// List of APIPermission
const (
	USERS_READ          APIPermission = "infra.users.read"
	GROUPS_READ         APIPermission = "infra.groups.read"
	DESTINATIONS_CREATE APIPermission = "infra.destinations.create"
	DESTINATIONS_READ   APIPermission = "infra.destinations.read"
	API_KEYS_CREATE     APIPermission = "infra.api-keys.create"
	API_KEYS_READ       APIPermission = "infra.api-keys.read"
	API_KEYS_DELETE     APIPermission = "infra.api-keys.delete"
	TOKENS_CREATE       APIPermission = "infra.tokens.create"
	ROLES_READ          APIPermission = "infra.roles.read"
	AUTH_DELETE         APIPermission = "infra.auth.delete"
	STAR                APIPermission = "infra.*"
)

var allowedAPIPermissionEnumValues = []APIPermission{
	"infra.users.read",
	"infra.groups.read",
	"infra.destinations.create",
	"infra.destinations.read",
	"infra.api-keys.create",
	"infra.api-keys.read",
	"infra.api-keys.delete",
	"infra.tokens.create",
	"infra.roles.read",
	"infra.auth.delete",
	"infra.*",
}

func (v *APIPermission) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := APIPermission(value)
	for _, existing := range allowedAPIPermissionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid APIPermission", value)
}

// NewAPIPermissionFromValue returns a pointer to a valid APIPermission
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAPIPermissionFromValue(v string) (*APIPermission, error) {
	ev := APIPermission(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for APIPermission: valid values are %v", v, allowedAPIPermissionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v APIPermission) IsValid() bool {
	for _, existing := range allowedAPIPermissionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to APIPermission value
func (v APIPermission) Ptr() *APIPermission {
	return &v
}

type NullableAPIPermission struct {
	value *APIPermission
	isSet bool
}

func (v NullableAPIPermission) Get() *APIPermission {
	return v.value
}

func (v *NullableAPIPermission) Set(val *APIPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIPermission(val *APIPermission) *NullableAPIPermission {
	return &NullableAPIPermission{value: val, isSet: true}
}

func (v NullableAPIPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
