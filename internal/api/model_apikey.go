/*
Infra API

Infra REST API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Apikey struct for Apikey
type Apikey struct {
	Id      string `json:"id"`
	Created int64  `json:"created"`
	Updated int64  `json:"updated"`
	Name    string `json:"name"`
	Key     string `json:"key"`
}

// NewApikey instantiates a new Apikey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApikey(id string, created int64, updated int64, name string, key string) *Apikey {
	this := Apikey{}
	this.Id = id
	this.Created = created
	this.Updated = updated
	this.Name = name
	this.Key = key
	return &this
}

// NewApikeyWithDefaults instantiates a new Apikey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApikeyWithDefaults() *Apikey {
	this := Apikey{}
	return &this
}

// GetId returns the Id field value
func (o *Apikey) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Apikey) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Apikey) SetId(v string) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *Apikey) GetCreated() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Apikey) GetCreatedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Apikey) SetCreated(v int64) {
	o.Created = v
}

// GetUpdated returns the Updated field value
func (o *Apikey) GetUpdated() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *Apikey) GetUpdatedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *Apikey) SetUpdated(v int64) {
	o.Updated = v
}

// GetName returns the Name field value
func (o *Apikey) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Apikey) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Apikey) SetName(v string) {
	o.Name = v
}

// GetKey returns the Key field value
func (o *Apikey) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *Apikey) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *Apikey) SetKey(v string) {
	o.Key = v
}

func (o Apikey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["updated"] = o.Updated
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableApikey struct {
	value *Apikey
	isSet bool
}

func (v NullableApikey) Get() *Apikey {
	return v.value
}

func (v *NullableApikey) Set(val *Apikey) {
	v.value = val
	v.isSet = true
}

func (v NullableApikey) IsSet() bool {
	return v.isSet
}

func (v *NullableApikey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApikey(val *Apikey) *NullableApikey {
	return &NullableApikey{value: val, isSet: true}
}

func (v NullableApikey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApikey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
