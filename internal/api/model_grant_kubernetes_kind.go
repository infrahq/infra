/*
Infra API

Infra REST API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// GrantKubernetesKind the model 'GrantKubernetesKind'
type GrantKubernetesKind string

// List of GrantKubernetesKind
const (
	GRANTKUBERNETESKIND_ROLE         GrantKubernetesKind = "role"
	GRANTKUBERNETESKIND_CLUSTER_ROLE GrantKubernetesKind = "cluster-role"
)

var allowedGrantKubernetesKindEnumValues = []GrantKubernetesKind{
	"role",
	"cluster-role",
}

func (v *GrantKubernetesKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GrantKubernetesKind(value)
	for _, existing := range allowedGrantKubernetesKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GrantKubernetesKind", value)
}

// NewGrantKubernetesKindFromValue returns a pointer to a valid GrantKubernetesKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGrantKubernetesKindFromValue(v string) (*GrantKubernetesKind, error) {
	ev := GrantKubernetesKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GrantKubernetesKind: valid values are %v", v, allowedGrantKubernetesKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GrantKubernetesKind) IsValid() bool {
	for _, existing := range allowedGrantKubernetesKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GrantKubernetesKind value
func (v GrantKubernetesKind) Ptr() *GrantKubernetesKind {
	return &v
}

type NullableGrantKubernetesKind struct {
	value *GrantKubernetesKind
	isSet bool
}

func (v NullableGrantKubernetesKind) Get() *GrantKubernetesKind {
	return v.value
}

func (v *NullableGrantKubernetesKind) Set(val *GrantKubernetesKind) {
	v.value = val
	v.isSet = true
}

func (v NullableGrantKubernetesKind) IsSet() bool {
	return v.isSet
}

func (v *NullableGrantKubernetesKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrantKubernetesKind(val *GrantKubernetesKind) *NullableGrantKubernetesKind {
	return &NullableGrantKubernetesKind{value: val, isSet: true}
}

func (v NullableGrantKubernetesKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrantKubernetesKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
