/* tslint:disable */
/* eslint-disable */
/**
 * Infra API
 * Infra REST API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Source,
    SourceFromJSON,
    SourceToJSON,
} from '../models';

export interface GetSourceRequest {
    id: string;
}

export interface ListSourcesRequest {
    kind?: string;
}

/**
 * 
 */
export class SourcesApi extends runtime.BaseAPI {

    /**
     * Get source by ID
     */
    async getSourceRaw(requestParameters: GetSourceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Source>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceFromJSON(jsonValue));
    }

    /**
     * Get source by ID
     */
    async getSource(requestParameters: GetSourceRequest, initOverrides?: RequestInit): Promise<Source> {
        const response = await this.getSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List sources
     */
    async listSourcesRaw(requestParameters: ListSourcesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Source>>> {
        const queryParameters: any = {};

        if (requestParameters.kind !== undefined) {
            queryParameters['kind'] = requestParameters.kind;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SourceFromJSON));
    }

    /**
     * List sources
     */
    async listSources(requestParameters: ListSourcesRequest, initOverrides?: RequestInit): Promise<Array<Source>> {
        const response = await this.listSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
